package analizadores;
import java_cup.runtime.*;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import compi1_proyecto1.AppState;
import compi1_proyecto1.Conjunto;
import compi1_proyecto1.Evaluacion;
import compi1_proyecto1.Nodo;

parser code 
{:
    //Codigo que se le agrega al parser
    public static HashMap<String, String> hojas = new HashMap<>();
    public static int contador = 0;
    public static int idHoja = 1;

    public static String[] conjNotacion1 = new String[2];
    public static List<String> conjNotacion2 = new ArrayList<>();

    //Codigo para Errores Sintacticos
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintactico en la Linea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    //Codigo para errores que ya no se pueden recuperar
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 

terminal String admiracion, hash, dollar, porcentaje, amberson, parentesisA, parentesisC, asterisco;
terminal String mas, coma, guion, punto, slash, dosPts, ptyComa, menor, igual, mayor, interrogacion;
terminal String arroba, corcheteA, sombrero, underScore, llaveA, or, llaveC, colocho, slashInverso;
terminal String conj, entero, letra, simbolo, identificador;

non terminal String INICIO, CUERPO, EVALUACIONES, CONJNOTACION, LISTASIMBOLOS, SIMBOLO;
non terminal Nodo EXPRESION;

precedence left or;
precedence left punto;
precedence left mas, asterisco, interrogacion;
precedence left parentesisA, parentesisC;


start with INICIO; 
INICIO::= llaveA CUERPO:a porcentaje porcentaje porcentaje porcentaje  EVALUACIONES:b llaveC;    

CUERPO  ::= CUERPO conj dosPts identificador:a guion mayor CONJNOTACION:b ptyComa
            {:
                if (conjNotacion2.size() != 0) {
                   AppState.conjuntos.add(new Conjunto(a,conjNotacion2));
                   conjNotacion2 = new ArrayList<>();
                } else {
                   AppState.conjuntos.add(new Conjunto(a,conjNotacion1));
                   conjNotacion1 = new String[2];
                }
            :}

            |conj dosPts identificador:a guion mayor CONJNOTACION:b ptyComa
            {:
                if (conjNotacion2.size() != 0) {
                   AppState.conjuntos.add(new Conjunto(a,conjNotacion2));
                   conjNotacion2 = new ArrayList<>();
                } else {
                   AppState.conjuntos.add(new Conjunto(a,conjNotacion1));
                   conjNotacion1 = new String[2];
                }
            :}

            |CUERPO:c identificador guion mayor EXPRESION:a ptyComa
            {: 
                Nodo hoja = new Nodo(idHoja+ "", "#", "N", Arrays.asList(idHoja + ""), Arrays.asList(idHoja + ""), null, null);   
                Nodo raiz = new Nodo("H" + contador, ".", a, hoja);
                hojas.put(idHoja + "", "#");
                AppState.arboles.add(raiz); 
                AppState.hojas.add(hojas);
                hojas = new HashMap<>();
                contador = 0;
                idHoja = 1;
            :}
            |identificador guion mayor EXPRESION:a ptyComa  
            {: 
                Nodo hoja = new Nodo(idHoja+ "", "#", "N", Arrays.asList(idHoja + ""), Arrays.asList(idHoja + ""), null, null);   
                hojas.put(idHoja + "", "#");                
                Nodo raiz = new Nodo("H" + contador, ".", a, hoja);
                AppState.arboles.add(raiz); 
                AppState.hojas.add(hojas);
                hojas = new HashMap<>();
                contador = 0;
                idHoja = 1;
            :}

;

CONJNOTACION ::= SIMBOLO:a colocho SIMBOLO:b   
                 {:
                    conjNotacion1[0] = a;
                    conjNotacion1[1] = b;
                 :}
                |LISTASIMBOLOS:a
                
;
LISTASIMBOLOS ::= LISTASIMBOLOS:a coma SIMBOLO:b    {:conjNotacion2.add(b);:}
                  |SIMBOLO:a                        {:conjNotacion2.add(a);:}
;

EXPRESION ::= punto EXPRESION:a EXPRESION:b  {:RESULT=new Nodo("H" + contador, ".", a, b); contador++;:}
              |or EXPRESION:a EXPRESION:b    {:RESULT=new Nodo("H" + contador, "|", a, b); contador++;:}
              |asterisco EXPRESION:a         {:RESULT=new Nodo("H" + contador, "*", a, null); contador++;:}
              |mas EXPRESION:a               {:RESULT=new Nodo("H" + contador, "+", a, null); contador++;:}
              |interrogacion EXPRESION:a     {:RESULT=new Nodo("H" + contador, "?", a, null); contador++;:}
              |llaveA identificador:a llaveC 
              {:
                RESULT = new Nodo(idHoja + "", a, "N", Arrays.asList(idHoja + ""), Arrays.asList(idHoja + ""), null, null);  
                hojas.put(idHoja + "", a); 
                idHoja++;
              :}
              |simbolo:a
              {:
                RESULT=new Nodo(idHoja + "", a.substring(1,a.length()-1), "N", Arrays.asList(idHoja + ""), Arrays.asList(idHoja + ""), null, null); 
                hojas.put(idHoja + "", a.replace("\"", "")); 
                idHoja++;
              :}
;
  
SIMBOLO ::= admiracion:a {:RESULT=a;:} 
    |hash:a              {:RESULT=a;:}
    |dollar:a            {:RESULT=a;:} 
    |porcentaje:a        {:RESULT=a;:} 
    |amberson:a          {:RESULT=a;:} 
    |parentesisA:a       {:RESULT=a;:} 
    |parentesisC:a       {:RESULT=a;:} 
    |asterisco:a         {:RESULT=a;:}
    |mas:a               {:RESULT=a;:}
    |coma:a              {:RESULT=a;:}
    |guion:a             {:RESULT=a;:}
    |punto:a             {:RESULT=a;:}
    |slash:a             {:RESULT=a;:}
    |dosPts:a            {:RESULT=a;:}
    |ptyComa:a           {:RESULT=a;:}
    |menor:a             {:RESULT=a;:}
    |igual:a             {:RESULT=a;:}
    |mayor:a             {:RESULT=a;:}
    |interrogacion:a     {:RESULT=a;:}
    |arroba:a            {:RESULT=a;:} 
    |corcheteA:a         {:RESULT=a;:}
    |sombrero:a          {:RESULT=a;:}
    |underScore:a        {:RESULT=a;:}
    |llaveA:a            {:RESULT=a;:}
    |or:a                {:RESULT=a;:}
    |llaveC:a            {:RESULT=a;:}
    |colocho:a           {:RESULT=a;:}
    |slashInverso:a      {:RESULT=a;:}
    |entero:a            {:RESULT=a;:}
    |letra:a             {:RESULT=a;:}
    |simbolo:a           {:RESULT=a;:}
; 

EVALUACIONES ::= EVALUACIONES identificador:a dosPts simbolo:b ptyComa {:AppState.evaluaciones.add(new Evaluacion(a,b));:}
                 |identificador:a dosPts simbolo:b ptyComa             {:AppState.evaluaciones.add(new Evaluacion(a,b));:}
;
